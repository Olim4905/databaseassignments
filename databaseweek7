{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPRgDJ3WaJxT9C83CBwOqJR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Olim4905/databaseweek4/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4tdg_gm8f96R"
      },
      "outputs": [],
      "source": [
        "from salalchemy import create_engine\n",
        "my_conn = create_engine(\"sqlite:////content/my_db.db\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r set=my conn.execute(''select name from sqlite master\n",
        "where type = 'table' '\"'y\n",
        "for row in r_set:\n",
        "print (row)"
      ],
      "metadata": {
        "id": "torwVYH3h2Gn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# display all records of perticular class only\n",
        "q=\"SELECT id, name, class, mark, sex FROM student WHERE class='Four'\" my_cur sor=my_conn.execute(q)\n",
        "for row in my cursor:\n",
        "print(row)"
      ],
      "metadata": {
        "id": "fvRgmpOwh5UF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r_set=my_conn.execute('''select name from sqlite_master\n",
        "where type = 'table' ''')\n",
        "for row in r set:\n",
        "print (row)"
      ],
      "metadata": {
        "id": "r0djllMTh7o1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "r_set=my_conn.execute(' ''SELECT * from student'\"');\n",
        "for row in r_set:\n",
        "print(row)"
      ],
      "metadata": {
        "id": "h9DBeohnh_tY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# select record based on Id\n",
        "q=\"'SELECT id, name, class, mark, sex FROM student WHERE id=8 \" my_cur sor=my_conn.execute(a) data_row=my_cursor.fetchone()\n",
        "#pr int (type (data_row))\n",
        "print(data_row[0],data_row[1],data_row[3])"
      ],
      "metadata": {
        "id": "3xuwMQy9iICj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Show 10 records only\n",
        "q=\"SELECT id, name, class, mark, sex FROM student limit 0,10 \" my_cursor=my_conn.execute(a) data_row=my_cursor.fetchal1() print (type(data_row))\n",
        "print (\"No of records : \",len (data row))\n",
        "for row in data row:\n",
        "print (row)"
      ],
      "metadata": {
        "id": "QMB6es1eiKf3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Delete sample table student\n",
        "from sqlalchemy.exc import SQLA|chemyError try:\n",
        "my_conn.execute(\"' 'DROP table student;'\"') print (\"student table deleted\")\n",
        "except SQLAlchemyError as e:\n",
        "#or int (e)\n",
        "error = str (e.\n",
        "dict ['or ig'])\n",
        "print (error)"
      ],
      "metadata": {
        "id": "LdkqwM1piNd_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# creating student table\n",
        "from sqlalchemy.exc import SQLAlchemyError try:\n",
        "my_conn. execute('\"'\n",
        "CREATE TABLE IF NOT EXISTS student (id integer primary key,\n",
        "name text, class text, mark integer sex text\n",
        ");''1)\n",
        "print (\"Student Table created successfully\")\n",
        "except SQLAlchemvError as e:\n",
        "#or int (e)\n",
        "error = str (e.\n",
        "_dict_['orig'])\n",
        "print (error)"
      ],
      "metadata": {
        "id": "wFWbxunDiPg9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# add records to student table\n",
        "r_set=my_conn.execute(''' INSERT INTO 'student' \n",
        "[id', 'name', 'class', 'mark', 'sex') VALUES\n",
        "(1, 'John Deo', 'Four', 75, 'female'),\n",
        "(2, 'Max Ruin', 'Three', 85, 'male'),\n",
        "(3, 'Arnold', 'Three', 55, 'male'),\n",
        "(4, 'Krish Star', 'Four', 60, \"female'),\n",
        "(5, 'John Mike', 'Four' 60, 'female'),\n",
        "(6, 'Alex John', 'Four', 55, 'male'),\n",
        "(7, 'My John Rob', 'Five', 78, 'male'), \n",
        "(8, 'Asruid', 'Five', 85, 'male'), \n",
        "(9, 'Tes Qry', 'Six', 78, 'male'), \n",
        "(10, 'Big John', 'Four', 55, 'female'),\n",
        "(11, 'Ronald', 'Six', 89, 'female'),\n",
        "(27, 'Big Nose', 'Three', 81, 'female'),\n",
        "(28, 'Roii Base', 'Seven', 86, 'female'),\n",
        "(29, 'Tess Played', 'Seven', 55, 'male'),\n",
        "(30, 'Reppy Red', 'Six', 79, 'female'),\n",
        "(31, 'Marry Toeey', 'Four', 88, 'male')\n",
        "(32, 'Binn Rott', 'Seven', 90, 'female'),\n",
        "(33, 'Kenn Rein', 'Six', 96, 'female'),\n",
        "(34, 'Gain Toe', 'Seven', 69, 'male'),\n",
        "(35, 'Rows Noump', 'Six' 88, 'female'):''')"
      ],
      "metadata": {
        "id": "RmkPMgnriSgF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sqlalchemy import create_ engine\n",
        "my_conn = create_engine(\"sqlite:////content/my_db2.db\")"
      ],
      "metadata": {
        "id": "CNYWg516kwBf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133
        },
        "outputId": "d1a24dfe-a89e-46d7-f25f-d4ac190ef1c7"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-42bdd78a24db>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    from sqlalchemy import create_ engine\u001b[0m\n\u001b[0m                                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}
